import requests
from bs4 import BeautifulSoup
import re
import time

# CONSTANTS
MIN_SPACES = 6
MAX_PAGES = 9999
SEARCH_QUERY = "discord tool"
MAIN_URL = f"https://github.com/search?q={SEARCH_QUERY.replace(' ', '+')}+language%3APython&type=repositories&s=updated&o=desc&p="
FLAG_EXES = True
REQUIRE_EXEC = True
DETECT_WEBHOOKS = True
DISCORD_WEBHOOK_REGEX = re.compile(r"https://discord(app)?\.com/api/webhooks/\d{18}/[A-Za-z0-9_\-]{68,72}")
DETECT_PYOBFUSCATE = True

# FUNCTIONS
def get_repos(page):
    url = MAIN_URL + str(page)
    response = requests.get(url, headers={
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
        "Content-Type": "application/json",
    })
    page += 1

    try:
        return response.json()
    except:
        return {"payload": {"results": []}}

def get_code(repo=None, folder=None) -> list:
    if repo:
        owner = repo["repo"]["repository"]["owner_login"]
        name = repo["repo"]["repository"]["name"]
        branch = requests.get(f"https://github.com/{owner}/{name}").text
    
    if folder:
        branch = requests.get(f"https://github.com{folder}").text

    if not repo and not folder:
        return []

    links = []
    folders = []

    soup = BeautifulSoup(branch, "html.parser")

    tree = soup.find_all("tr", class_="react-directory-row")
    for item in tree:
        link_sibling = item.find("svg", class_="color-fg-muted")
        if link_sibling:
            link = item.find("div", class_="overflow-hidden")
            if link:
                link = link.find("a")
                links.append(link["href"])
    
    for item in tree:
        link_sibling = item.find("svg", class_="icon-directory")
        if link_sibling:
            link = item.find("div", class_="overflow-hidden")
            if link:
                link = link.find("a")
                folders.append(link["href"])

    for folder in folders:
        for link in get_code(folder=folder):
            links.append(link)

    return links

# RUN

if __name__ == "__main__":
    for page in range(1, MAX_PAGES + 1):
        print(f"Page: {page}")
        repos = get_repos(page)

        if not repos["payload"]["results"]:
            print("No more results.")
            break

        for repo in repos["payload"]["results"]:
            owner, name = repo["repo"]["repository"]["owner_login"], repo["repo"]["repository"]["name"]
            print(f"Owner: {owner}, Name: {name}")

            with open("./detections/seen_repos.txt", "r") as f:
                if f"{owner}/{name}\n" in f.read():
                    time.sleep(5)
                    continue

            tree = get_code(repo=repo)
            raw_links = []

            for link in tree:
                if ".py" in link:
                    link = link.replace("/blob", "")
                    raw_url = f"https://raw.githubusercontent.com{link}"
                    code = requests.get(raw_url).text
                    raw_links.append((link, code))

                if FLAG_EXES and ".exe" in link:
                    print("Detected Suspicious Project. (EXE)")
                    with open("./detections/detected_exes.txt", "r") as f:
                        if not f"{owner}/{name}\n" in f.read():
                            with open("./detections/suspicious_repos.txt", "a") as f:
                                f.write(f"{owner}/{name}\n")
            
            for link, code in raw_links:
                if DETECT_PYOBFUSCATE and "pyobfuscate" in code:
                    print("Detected Potentially Malicious Project. (PyObfuscate)")
                    with open("./detections/detected_pyobfuscate.txt", "r") as f:
                        if not f"{owner}/{name}\n" in f.read():
                            with open("./detections/detected_pyobfuscate.txt", "a") as f:
                                f.write(f"{owner}/{name}\n")

                            with open("./detections/suspicious_repos.txt", "a") as f:
                                f.write(f"{owner}/{name}\n")

                for line in code.splitlines():
                    if f"{' ' * MIN_SPACES};" in line:

                        if REQUIRE_EXEC and "exec" not in line:
                            continue

                        print("Detected Malicious Project.")
                        print(link)

                        with open("./detections/detected_scripts.txt", "r") as f:
                            if not line in f.read():
                                with open("./detections/detected_scripts.txt", "a") as f:
                                    f.write(f"{line}\n")

                                print("New script has been saved.")
                            else:
                                print("Script already exists.")

                        with open("./detections/detected_repos.txt", "a") as f:
                            f.write(f"{owner}/{name}\n")

                        break

                    if DETECT_WEBHOOKS and DISCORD_WEBHOOK_REGEX.findall(line):
                        print("Detected Potentially Malicious Project. (Webhook)")
                        print(link)

                        with open("./detections/detected_webhooks.txt", "r") as f:
                            for match in DISCORD_WEBHOOK_REGEX.findall(line):
                                if not line in f.read():
                                    with open("./detections/detected_webhooks.txt", "a") as f:
                                        f.write(f"{line}\n")
                                    print("New webhook has been saved.")
                                else:
                                    print("Webhook already exists.")

                        with open("./detections/suspicious_repos.txt", "a") as f:
                            f.write(f"{owner}/{name}\n")

                        break
            
            with open("./detections/seen_repos.txt", "a") as f:
                f.write(f"{owner}/{name}\n")
